#include "AESLib.h" 
#define RXp2 16
#define TXp2 17

int BUTTON = 19;
int BUTTON1 = 27;
boolean toggle = false;

#define INPUT_BUFFER_LIMIT (128+1) 
AESLib aesLib;
byte aes_key[] = { 57, 36, 24, 25, 28, 86, 32, 41, 31, 36, 91, 36, 51, 74, 63, 89 };
byte aes_iv[16] = { 0x79, 0x4E, 0x98, 0x21, 0xAE, 0xD8, 0xA6, 0xAA, 0xD7, 0x97, 0x44, 0x14, 0xAB, 0xDD, 0x9F, 0x2C };

void aes_init() {
  aesLib.gen_iv(aes_iv);
  aesLib.set_paddingmode((paddingMode)0);
}

uint16_t encryptData(const char* data, byte* outputBuffer, byte iv[]) {
    uint16_t cipherLength = aesLib.encrypt((byte*)data, strlen(data), outputBuffer, aes_key, sizeof(aes_key), iv);
    return cipherLength;
}

void sendEncryptedData(char data) {
  byte encryptedData[2*INPUT_BUFFER_LIMIT];
  uint16_t cipherLength = encryptData(&data, encryptedData, aes_iv);
  Serial2.write((byte*)encryptedData, cipherLength);  
  for (int i = 0; i < cipherLength; i++) {
    if(encryptedData[i]<16) Serial.print("0"); 
    Serial.print(encryptedData[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
}

void setup(){
  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, RXp2, TXp2);
  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(BUTTON1, INPUT_PULLUP);
  aes_init(); 
}

void loop(){
  if (digitalRead(BUTTON) == LOW) {
  toggle = !toggle; 
  sendEncryptedData(toggle ? '0' : '1'); 
  Serial.println(toggle ? "Turn on LED" : "Turn off LED");
  delay(500);
  }
  else if (digitalRead(BUTTON1) == LOW) {
    toggle = !toggle; 
    sendEncryptedData(toggle ? '2' : '3'); 
    Serial.println(toggle ? "Turn on LED" : "Turn off LED");
    delay(500);
  }
}
